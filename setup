#!/usr/bin/env bash

run_playbook=1
syntax_check=0

install_roles=1
install_ansible=1
install_homebrew=1

ansible_tags=""
ansible_verbose=0
ansible_become=0
list_tags=0

package=""

function show_help {
  echo "Usage: $0"
  echo " -h         Show this help"
  echo " -v         Verbose mode"
  echo " -n         Do not run Ansible playbook"
  echo " -q         Do not install Ansible requirements"
  echo " -l         List available Ansible tags"
  echo " -s         Ansible playbook syntax check"
  echo " -t TAGS    Run Ansible with the given comma separated list of tags"
  echo " -p PACKAGE Run Ansible with given predefined package"
}

while getopts ":hcnqlsvt:" opt; do
  case $opt in
    h)
      show_help
      exit 0
      ;;
    n)
      run_playbook=0
      ;;
    q)
      install_roles=0
      install_ansible=0
      install_homebrew=0
      ;;
    l)
      list_tags=1
      run_playbook=0
      ;;
    s)
      syntax_check=1
      run_playbook=0
      ;;
    v)
      ansible_verbose=1
      ;;
    p)
      package=$OPTARG
      ;;
    t)
      ansible_tags=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      show_help
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [ "$package" != "" ]; then
  if [ "$ansible_tags" != "" ]; then
    echo "FAILED: You can't combine -t and -p options"
    exit 1
  fi
  case $package in
    tools)
      ansible_tags="tools"
      ;;
    elixir)
      ansible_tags="erlang,elixir"
      ;;
    golang)
      ansible_tags="golang"
      ;;
    nodejs)
      ansible_tags="node"
      ;;
    development)
      ansible_tags="git,gitkraken,vscode"
      ;;
    vagrant)
      ansible_tags="vagrant,virtualbox"
      ;;
  esac
fi

if test "$(uname)" = "Darwin"; then
  if [ "$install_homebrew" == "1" ]; then
    if test ! $(which gcc); then
      echo "Installing xcode..."
      xcode-select --install
    fi
    if test ! "$(which brew)"; then
      echo "Installing homebrew..."
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  fi
  if [ "$install_ansible" == "1" ]; then
    if test ! "$(which ansible)"; then
      echo "Installing ansible..."
      brew install ansible
    fi
  fi
elif test "$(uname)" = "Linux"; then
  if [ "$install_ansible" == "1" ]; then
    if test -f /etc/lsb-release -a ! "$(which ansible)"; then
      echo "Installing ansible..."
      sudo apt-get install -y software-properties-common
      sudo apt-add-repository -y ppa:ansible/ansible
      sudo apt-get update
      sudo apt-get install -y ansible
    fi
  fi
  ansible_become=1
fi

if test ! "$(which ansible)"; then
  echo "Not supported yet."
  exit 1
fi

python --version
ansible --version

if [ "$install_roles" == "1" ]; then
  echo "Installing Ansible roles..."
  ansible-galaxy install -r requirements.yml -p roles || { echo "Failed to install Ansible roles"; exit 1; }
  if test "$(uname)" = "Linux"; then
    echo "Patching kbrebanov.erlang role..."
    sed -i 's/update_cache: yes/update_cache: no/' roles/kbrebanov.erlang/tasks/Ubuntu.yml || { echo "Failed to patch"; exit 1; }
  fi
fi

if [ "$list_tags" == "1" ]; then

  ansible-playbook main.yml --list-tags

elif [ "$syntax_check" == "1" ]; then

  ansible-playbook main.yml --syntax-check

elif [ "$run_playbook" == "1" ]; then

  ansible_opts=""

  if [ "$ansible_verbose" == "1" ]; then
    ansible_opts="-v $ansible_opts"
  fi

  if [ "$ansible_tags" != "" ]; then
    ansible_opts="--tags=$ansible_tags $ansible_opts"
  fi

  if [ "$ansible_become" == "1" ]; then
    ansible_opts="--become $ansible_opts"
    sudo true || exit 1
  fi

  ansible-playbook main.yml $ansible_opts

fi

# I don't have a bootstrap script for my dotfiles
# test -d ~/.dotfiles && cd $_ && ./script/bootstrap
